import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { Mic, Volume2, MapPin, Clock, User, Copy, Play } from "lucide-react";
import { useState } from "react";

const Home = () => {
  const { toast } = useToast();
  const [selectedPhrase, setSelectedPhrase] = useState<string>("");

  // Mock context data - will be replaced with real data in Phase 2
  const contextData = {
    time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
    location: "Living Room",
    detectedPerson: "Sarah (Caregiver)"
  };

  // Mock AI-suggested phrases - will be generated by AI in Phase 2
  const suggestedPhrases = [
    { 
      id: 1, 
      text: "I need help with medication", 
      context: "Based on time and routine",
      priority: "high"
    },
    { 
      id: 2, 
      text: "Thank you for helping me", 
      context: "Detected caregiver present",
      priority: "medium"
    },
    { 
      id: 3, 
      text: "I'm feeling comfortable", 
      context: "Current location context",
      priority: "medium"
    },
    { 
      id: 4, 
      text: "Can we talk about my day?", 
      context: "Social interaction suggestion",
      priority: "low"
    }
  ];

  const handleSpeakPhrase = async (phrase: string) => {
    setSelectedPhrase(phrase);
    
    try {
      // Try text-to-speech first
      if ('speechSynthesis' in window) {
        const utterance = new SpeechSynthesisUtterance(phrase);
        utterance.rate = 0.8; // Slightly slower for clarity
        utterance.volume = 0.9;
        speechSynthesis.speak(utterance);
        
        toast({
          title: "Speaking phrase",
          description: phrase,
        });
      } else {
        // Fallback to clipboard
        await navigator.clipboard.writeText(phrase);
        toast({
          title: "Copied to clipboard",
          description: phrase,
        });
      }
    } catch (error) {
      // Fallback if clipboard fails
      toast({
        title: "Text ready",
        description: phrase,
        variant: "destructive"
      });
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "high": return "bg-warning text-warning-foreground";
      case "medium": return "bg-accent text-accent-foreground";
      case "low": return "bg-secondary text-secondary-foreground";
      default: return "bg-secondary text-secondary-foreground";
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-4 space-y-6">
      {/* Context Information Panel */}
      <Card className="bg-muted/30">
        <CardHeader className="pb-4">
          <CardTitle className="text-lg">Current Context</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
            <div className="flex items-center gap-3 p-3 bg-card rounded-lg">
              <Clock className="h-5 w-5 text-primary" />
              <div>
                <div className="text-sm text-muted-foreground">Time</div>
                <div className="font-medium">{contextData.time}</div>
              </div>
            </div>
            <div className="flex items-center gap-3 p-3 bg-card rounded-lg">
              <MapPin className="h-5 w-5 text-primary" />
              <div>
                <div className="text-sm text-muted-foreground">Location</div>
                <div className="font-medium">{contextData.location}</div>
              </div>
            </div>
            <div className="flex items-center gap-3 p-3 bg-card rounded-lg">
              <User className="h-5 w-5 text-primary" />
              <div>
                <div className="text-sm text-muted-foreground">Detected</div>
                <div className="font-medium">{contextData.detectedPerson}</div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* AI Phrase Suggestions */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg">Suggested Phrases</CardTitle>
          <CardDescription>
            AI-powered suggestions based on your context
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4">
            {suggestedPhrases.map((suggestion) => (
              <Card 
                key={suggestion.id} 
                className={`cursor-pointer transition-all hover:scale-[1.02] hover:shadow-md ${
                  selectedPhrase === suggestion.text ? 'ring-2 ring-primary' : ''
                }`}
                onClick={() => handleSpeakPhrase(suggestion.text)}
              >
                <CardContent className="p-4">
                  <div className="flex items-start justify-between gap-4">
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2 mb-2">
                        <Badge className={getPriorityColor(suggestion.priority)}>
                          {suggestion.priority} priority
                        </Badge>
                      </div>
                      <div className="text-lg font-medium mb-1 leading-relaxed">
                        {suggestion.text}
                      </div>
                      <div className="text-sm text-muted-foreground">
                        {suggestion.context}
                      </div>
                    </div>
                    <div className="flex flex-col gap-2">
                      <Button 
                        size="sm" 
                        className="h-12 w-12 p-0"
                        onClick={(e) => {
                          e.stopPropagation();
                          handleSpeakPhrase(suggestion.text);
                        }}
                      >
                        <Volume2 className="h-5 w-5" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Selected Phrase Display */}
      {selectedPhrase && (
        <Card className="bg-primary/5 border-primary/20">
          <CardContent className="p-4">
            <div className="flex items-center justify-between gap-4">
              <div className="flex-1">
                <div className="text-sm text-muted-foreground mb-1">Selected phrase:</div>
                <div className="text-lg font-medium">{selectedPhrase}</div>
              </div>
              <div className="flex gap-2">
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => navigator.clipboard.writeText(selectedPhrase)}
                >
                  <Copy className="h-4 w-4 mr-2" />
                  Copy
                </Button>
                <Button 
                  size="sm"
                  onClick={() => handleSpeakPhrase(selectedPhrase)}
                >
                  <Play className="h-4 w-4 mr-2" />
                  Speak Again
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Quick Actions */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg">Quick Actions</CardTitle>
          <CardDescription>
            Common phrases and custom input
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 sm:grid-cols-3 gap-3 mb-4">
            {["Yes", "No", "Thank you", "Help", "Water", "Tired"].map((phrase) => (
              <Button
                key={phrase}
                variant="outline"
                size="lg"
                className="h-16 text-base"
                onClick={() => handleSpeakPhrase(phrase)}
              >
                <Volume2 className="h-4 w-4 mr-2 text-primary" />
                {phrase}
              </Button>
            ))}
          </div>
          
          <div className="flex flex-col sm:flex-row gap-3">
            <Button size="lg" className="flex-1 h-16" variant="secondary">
              <Mic className="h-5 w-5 mr-3" />
              Record Custom Message
            </Button>
            <Button variant="outline" size="lg" className="flex-1 h-16">
              Type Custom Message
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default Home;