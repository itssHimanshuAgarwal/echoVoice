import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { Mic, Volume2, MapPin, Clock, User, Copy, Play } from "lucide-react";
import { useState, useRef } from "react";
import { cn } from "@/lib/utils";

const Home = () => {
  const { toast } = useToast();
  const [selectedPhrase, setSelectedPhrase] = useState<string>("");
  const [animatingCard, setAnimatingCard] = useState<number | null>(null);
  const [speakingButton, setSpeakingButton] = useState<number | null>(null);
  const rippleRefs = useRef<{ [key: number]: HTMLDivElement | null }>({});

  // Mock context data - will be replaced with real data in Phase 2
  const contextData = {
    time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
    location: "Living Room",
    detectedPerson: "Sarah (Caregiver)"
  };

  // Mock AI-suggested phrases - will be generated by AI in Phase 2
  const suggestedPhrases = [
    { 
      id: 1, 
      text: "I need help with medication", 
      context: "Based on time and routine",
      priority: "high"
    },
    { 
      id: 2, 
      text: "Thank you for helping me", 
      context: "Detected caregiver present",
      priority: "medium"
    },
    { 
      id: 3, 
      text: "I'm feeling comfortable", 
      context: "Current location context",
      priority: "medium"
    },
    { 
      id: 4, 
      text: "Can we talk about my day?", 
      context: "Social interaction suggestion",
      priority: "low"
    }
  ];

  const handleSpeakPhrase = async (phrase: string, cardId?: number) => {
    setSelectedPhrase(phrase);
    
    // Trigger card animation
    if (cardId) {
      setAnimatingCard(cardId);
      setSpeakingButton(cardId);
      setTimeout(() => setAnimatingCard(null), 600);
      setTimeout(() => setSpeakingButton(null), 1500);
    }
    
    try {
      // Try text-to-speech first
      if ('speechSynthesis' in window) {
        const utterance = new SpeechSynthesisUtterance(phrase);
        utterance.rate = 0.8; // Slightly slower for clarity
        utterance.volume = 0.9;
        speechSynthesis.speak(utterance);
        
        toast({
          title: "Speaking phrase",
          description: phrase,
        });
      } else {
        // Fallback to clipboard
        await navigator.clipboard.writeText(phrase);
        toast({
          title: "Copied to clipboard",
          description: phrase,
        });
      }
    } catch (error) {
      // Fallback if clipboard fails
      toast({
        title: "Text ready",
        description: phrase,
        variant: "destructive"
      });
    }
  };

  const createRipple = (event: React.MouseEvent, cardId: number) => {
    const card = event.currentTarget as HTMLElement;
    const rect = card.getBoundingClientRect();
    const size = Math.max(rect.width, rect.height);
    const x = event.clientX - rect.left - size / 2;
    const y = event.clientY - rect.top - size / 2;
    
    const ripple = document.createElement('span');
    ripple.style.cssText = `
      position: absolute;
      border-radius: 50%;
      background: rgba(59, 130, 246, 0.3);
      transform: scale(0);
      animation: ripple 0.6s ease-out;
      left: ${x}px;
      top: ${y}px;
      width: ${size}px;
      height: ${size}px;
      pointer-events: none;
      z-index: 10;
    `;
    
    card.appendChild(ripple);
    setTimeout(() => ripple.remove(), 600);
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "high": return "bg-warning text-warning-foreground";
      case "medium": return "bg-accent text-accent-foreground";
      case "low": return "bg-secondary text-secondary-foreground";
      default: return "bg-secondary text-secondary-foreground";
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-8">
      {/* Context Information Panel */}
      <Card className="context-section">
        <CardHeader className="pb-5">
          <CardTitle className="text-lg font-display">Current Context</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
            <div className="flex items-center gap-3 p-4 bg-card rounded-xl border border-border/30 shadow-[var(--shadow-soft)]">
              <div className="p-2 bg-primary/10 rounded-lg">
                <Clock className="h-5 w-5 text-primary" />
              </div>
              <div>
                <div className="text-sm text-muted-foreground">Time</div>
                <div className="font-medium">{contextData.time}</div>
              </div>
            </div>
            <div className="flex items-center gap-3 p-4 bg-card rounded-xl border border-border/30 shadow-[var(--shadow-soft)]">
              <div className="p-2 bg-accent/10 rounded-lg">
                <MapPin className="h-5 w-5 text-accent" />
              </div>
              <div>
                <div className="text-sm text-muted-foreground">Location</div>
                <div className="font-medium">{contextData.location}</div>
              </div>
            </div>
            <div className="flex items-center gap-3 p-4 bg-card rounded-xl border border-border/30 shadow-[var(--shadow-soft)]">
              <div className="p-2 bg-success/10 rounded-lg">
                <User className="h-5 w-5 text-success" />
              </div>
              <div>
                <div className="text-sm text-muted-foreground">Detected</div>
                <div className="font-medium">{contextData.detectedPerson}</div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* AI Phrase Suggestions */}
      <Card className="phrase-card">
        <CardHeader>
          <CardTitle className="text-lg font-display">Suggested Phrases</CardTitle>
          <CardDescription>
            AI-powered suggestions based on your context
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {suggestedPhrases.map((suggestion) => (
            <Card 
              key={suggestion.id} 
              className={cn(
                "cursor-pointer transition-[var(--transition-gentle)] border-l-4 relative overflow-hidden",
                "hover:scale-[1.01] hover:shadow-[var(--shadow-gentle)]",
                selectedPhrase === suggestion.text ? 'ring-2 ring-primary border-l-primary' : 'border-l-accent/30 hover:border-l-accent',
                animatingCard === suggestion.id && 'animate-gentle-bounce'
              )}
              onClick={(e) => {
                createRipple(e, suggestion.id);
                handleSpeakPhrase(suggestion.text, suggestion.id);
              }}
            >
              <CardContent className="p-5">
                <div className="flex items-start justify-between gap-4">
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-2 mb-3">
                      <Badge className={cn("text-xs font-medium", getPriorityColor(suggestion.priority))}>
                          {suggestion.priority} priority
                        </Badge>
                      </div>
                      <div className="text-lg font-medium mb-2 leading-relaxed font-display">
                        {suggestion.text}
                      </div>
                      <div className="text-sm text-muted-foreground">
                        {suggestion.context}
                      </div>
                    </div>
                  <div className="flex flex-col gap-2">
                    <Button 
                      size="lg" 
                      variant="warm"
                      className={cn(
                        "h-12 w-12 p-0 rounded-xl relative overflow-hidden",
                        speakingButton === suggestion.id && 'animate-speak-ready'
                      )}
                      onClick={(e) => {
                        e.stopPropagation();
                        handleSpeakPhrase(suggestion.text, suggestion.id);
                      }}
                    >
                      <Volume2 className="h-5 w-5" />
                    </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
          ))}
        </CardContent>
      </Card>

      {/* Selected Phrase Display */}
      {selectedPhrase && (
        <Card className="bg-primary/5 border-primary/20 shadow-[var(--shadow-gentle)]">
          <CardContent className="p-5">
            <div className="flex items-center justify-between gap-4">
              <div className="flex-1">
                <div className="text-sm text-muted-foreground mb-2 font-medium">Selected phrase:</div>
                <div className="text-lg font-medium font-display">{selectedPhrase}</div>
              </div>
              <div className="flex gap-2">
                <Button 
                variant="outline"
                  size="sm"
                  onClick={() => navigator.clipboard.writeText(selectedPhrase)}
                >
                  <Copy className="h-4 w-4 mr-2" />
                  Copy
                </Button>
                <Button 
                  size="sm"
                  onClick={() => handleSpeakPhrase(selectedPhrase)}
                >
                  <Play className="h-4 w-4 mr-2" />
                  Speak Again
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Quick Actions */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg font-display">Quick Actions</CardTitle>
          <CardDescription>
            Common phrases and custom input
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 sm:grid-cols-3 gap-3 mb-6">
            {["Yes", "No", "Thank you", "Help", "Water", "Tired"].map((phrase, index) => (
              <Button
                key={phrase}
                variant="outline"
                size="xl"
                className="h-16 text-base font-medium relative overflow-hidden group"
                onClick={(e) => {
                  createRipple(e, index + 100); // Use offset ID for quick phrases
                  handleSpeakPhrase(phrase);
                }}
              >
                <Volume2 className="h-4 w-4 mr-2 text-primary" />
                {phrase}
              </Button>
            ))}
          </div>
          
          <div className="flex flex-col sm:flex-row gap-3">
            <Button size="xl" className="flex-1 h-16" variant="gentle">
              <Mic className="h-5 w-5 mr-3" />
              Record Custom Message
            </Button>
            <Button variant="outline" size="xl" className="flex-1 h-16">
              Type Custom Message
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default Home;